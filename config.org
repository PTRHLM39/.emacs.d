* Configuration
This .org-file acts as the emacs-configuration.
It's structured in source-blocks and when evaluated,
it will tangle up into one or more loadable .el-files.
Their path's are defined in init.el, ready to be loaded.

By this way, makes it simple to maintain, read and organize
files which tend to clutter up easily.
** Visit and edit this configuration
Visit with key-sequence *C-c e*
#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+END_SRC
Evaluate config with key-sequence *C-c l*
#+BEGIN_SRC emacs-lisp
  (defun config-eval ()
    "Evaluating ~/.emacs.d/config.org at runtime"
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c l") 'config-eval)
#+END_SRC
** Navigation
*** Helm | Selection framework
|---------------+---------------------+------------------------------------------|
| *Key binding* | *Command*           | *Desciption*                             |
|---------------+---------------------+------------------------------------------|
| M-x           | helm-M-x            | List commands                            |
| M-y           | helm-show-kill-ring | View killed text                         |
| C-x b         | helm-mini           | View open and recently opened files      |
| C-x C-f       | helm-find-files     | Find-file                                |
| C-c h         | helm-man-woman      | View any manual entry                    |
| C-c h /       | helm-find           | Unix 'find'                              |
| C-c h l       | helm-locate         | Unix 'locate'                            |
| C-c h a       | helm-apropos        | Describe commands, functions & variables |
| C-c h t       | helm-top            | Runnig processes with top                |
|---------------+---------------------+------------------------------------------|
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :config

    ;; Prefix-key
    (global-set-key (kbd "C-c h") 'helm-command-prefix)
    (global-unset-key (kbd "C-x c"))

    (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
    (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action)
    (define-key helm-map (kbd "C-z") 'helm-select-action)

    (global-set-key (kbd "M-x") #'helm-M-x)
    (global-set-key (kbd "M-y") #'helm-show-kill-ring)
    (global-set-key (kbd "C-x b") #'helm-mini)
    (global-set-key (kbd "C-x C-f") #'helm-find-files)

    (when (executable-find "curl")
      (setq helm-google-suggest-use-curl-p t))

    (setq helm-split-window-inside-p            t
	  helm-move-to-line-cycle-in-source     t
	  helm-ff-search-library-in-sexp        t
	  helm-scroll-amount                    8
	  helm-ff-file-name-history-use-recentf t
	  helm-echo-input-in-header-line        t
	  helm-M-x-fuzzy-match                  t
	  helm-buffers-fuzzy-matching           t
	  helm-recentf-fuzzy-match              t
	  helm-locate-fuzzy-match               t
	  helm-apropos-fuzzy-match              t
	  helm-lisp-fuzzy-completion            t)

    (setq helm-autoresize-max-height 0)
    (setq helm-autoresize-min-height 20)
    (helm-autoresize-mode 1)
    (add-to-list 'helm-sources-using-default-as-input 'helm-source-man-pages)

    (helm-mode 1)
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (use-package helm-projectile
    :ensure t)

  (use-package projectile
    :ensure t
    :config
    (projectile-mode)
    (setq projectile-completion-system 'helm
	  projectile-switch-project-action 'helm-projectile)

    (helm-projectile-on))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (use-package async
    :ensure t
    :init (dired-async-mode 1))
#+END_SRC
*** Mini-buffer
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode))
#+END_SRC
*** Text-editing
**** Sudo-edit
#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit
    :ensure t
    :bind
    ("s-e" . sudo-edit))
#+END_SRC
**** Smartparens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :ensure t
    :config (require 'smartparens-config)
    (show-smartparens-global-mode 1)
    (smartparens-global-mode 1)
    (sp-use-paredit-bindings))
#+END_SRC
**** Mark-multiple
#+BEGIN_SRC emacs-lisp
  (use-package mark-multiple
    :ensure t
    :bind ("C-c q" . 'mark-next-like-this))
#+END_SRC
**** Expand-region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :bind ("C-q" . er/expand-region))
#+END_SRC
**** Delete/kill text
***** Hungry-delete
#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :ensure t
    :config
    (global-hungry-delete-mode))
#+END_SRC
***** Zapping to char
Kill text between cursor and a selected character
#+BEGIN_SRC emacs-lisp
  (use-package zzz-to-char
    :ensure t
    :bind ("M-z" . zzz-up-to-char))
#+END_SRC
*** Switch window
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increace 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
	  '("a" "s" "d" "f" "j" "k" "l" "i" "o"))
    :bind
    ([remap other-window] . switch-window))
#+END_SRC
**** Avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind ("M-s" . avy-goto-word-1))
#+END_SRC
**** Follow window-split
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC
** Miscellaneous
*** Utf-8
#+BEGIN_SRC emacs-lisp
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
#+END_SRC
*** Shell
#+BEGIN_SRC emacs-lisp
  (defvar my-term-shell "/bin/bash")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)

  (global-set-key (kbd "M-RET") 'ansi-term)
#+END_SRC
*** Disable/Enable
#+BEGIN_SRC emacs-lisp
  ;; Disable startup-message
  (setq inhibit-startup-message t)

  ;; Disable tool-bar
  (tool-bar-mode -1)

  ;; Disable menu-bar
  (menu-bar-mode -1)

  ;; Disable Scroll-bar
  (scroll-bar-mode -1)

  ;; Disable bell
  (setq ring-bell-function 'ignore)

  ;; Disable backups and auto-save-files
  (setq make-backup-files nil)
  (setq quto-save-default nil)
#+END_SRC

*** Mode-line
**** Clock
#+BEGIN_SRC emacs-lisp
  (setq display-time-24hr-format t)
  (setq display-time-format "%H:%M - %d %B %Y")
  (display-time-mode 1)
#+END_SRC
**** Battery indicator
#+BEGIN_SRC emacs-lisp
  (use-package fancy-battery
    :ensure t
    :config
    (setq fancy-battery-show-percentage t)
    (setq battery-update-interval 15)
    (if window-system
	(fancy-battery-mode)
	(display-battery-mode)))
#+END_SRC
**** Doom-modeline
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :ensure t
    :hook (after-init . doom-modeline-mode))
#+END_SRC
**** Icons
#+BEGIN_SRC emacs-lisp
  (when window-system
   (use-package all-the-icons
    :ensure t))
#+END_SRC
*** Theme
#+BEGIN_SRC emacs-lisp
  (use-package kaolin-themes
    :ensure t
    :config
    (defun set-light-theme ()
    (interactive)
    (load-theme 'kaolin-light t))

    (defun set-dark-theme ()
    (interactive)
    (load-theme 'kaolin-valley-dark t))

  (let ((current-hour (string-to-number(format-time-string "%H"))))
    (if (or (< current-hour 6) (> current-hour 16))(set-dark-theme) (set-light-theme))))
#+END_SRC
#+BEGIN_SRC emacs-lisp

#+END_SRC
*** Interface
**** Scrolling
#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
#+END_SRC
**** y-or-n
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
**** Line-numbers
#+BEGIN_SRC emacs-lisp
  (use-package linum-relative
    :ensure t
    :config
    (setq linum-relative-current-symbol 1)
    (add-hook 'prog-mode-hook 'linum-relative-mode))
    #+END_SRC
**** Pretty symbols
     #+BEGIN_SRC emacs-lisp
  (when window-system
    (use-package pretty-mode
      :ensure t
      :config
      (global-pretty-mode t)))
     #+END_SRC
** Org-mode
   #+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure t
    :pin org)
   #+END_SRC
** Programtext tools
*** Golang
**** Gomode
#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :ensure t
    :config
    (add-to-list 'load-path "~/go/src/github.com/dougm/goflymake")
    (require 'go-flymake))
#+END_SRC
Fetch go-playgound with *M-x go-playgound RET*, add your go-text and hit *C-RET*
it will then be saved, compiled and executed.
When done, hit *M-x go-playgound-rm RET* to remove and leave playgound.
#+BEGIN_SRC emacs-lisp
  (use-package go-playground
    :ensure t)
#+END_SRC
**** gopls auto-complete
***** lsp-mode
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :ensure t
    :commands (lsp lsp-deferred)
    :hook (go-mode . lsp-deferred))

  (defun lsp-go-install-save-hooks ()
    (add-hook 'before-save-hook #'lsp-format-buffer t t)
    (add-hook 'before-save-hook #'lsp-organize-imports t t))
  (add-hook 'go-mode-hook #'lsp-go-install-save-hooks)

  (use-package lsp-ui
    :ensure t
    :commands lsp-ui-mode)

  (use-package company-lsp
    :ensure t
    :commands company-lsp)
#+END_SRC
*** Version control
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :config
    (setq magit-push-always-verify nil)
    (setq git-commit-summary-max-length 50)
    :bind
    ("M-g" . magit-status))
#+END_SRC
*** Templates
**** Yasnippets
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :init
    (yas-global-mode 1))
#+END_SRC
**** Snippets
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet-snippets
    :ensure t)

  (use-package go-snippets
    :ensure t)
#+END_SRC
*** Error-checking
**** Flychek
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode t)
    (defun disable-flycheck-in-org-src-block ()
      "Disables flychecks that could be problematic in org-mode"
      (setq-local flycheck-disabled-checkers '(emacs-lisp-checkdoc)))
    :hook ((prog-mode . flycheck-mode)
	   (org-src-mode . disable-flycheck-in-org-src-block)))
#+END_SRC
*** Auto-complete
**** Company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 3)
    (global-company-mode t)

  (custom-set-faces
   '(company-preview
     ((t (:foreground "darkgray" :underline t))))
   '(company-preview-common
     ((t (:inherit company-preview :weight bold))))
   '(company-tooltip
     ((t (:inherit popup-face))))
   '(company-tooltip-selection
     ((t (:inherit popup-menu-selection-face))))
   '(company-tooltip-common
     ((((type x)) (:inherit company-tooltip))))
   '(company-tooltip-common-selection
     ((((type x)) (:inherit company-tooltip-selection :weight bold))
      (t (:inherit company-tooltip-selection))))))
#+END_SRC
**** Bash
#+BEGIN_SRC emacs-lisp
  (add-hook 'shell-mode-hook 'yas-minor-mode)
  (add-hook 'shell-mode-hook 'flycheck-mode)
  (add-hook 'shell-mode-hook 'company-mode)

  (defun shell-mode-company-init ()
    (setq-local company-backends '((company-shell
				    company-shell-env
				    company-etags
				    company-dabbrev-code)))))

  (use-package company-shell
  :ensure t
  :config
  (require 'company)
  (add-hook 'shell-mode-hook 'shell-mode-company-init))
#+END_SRC
**** C/C++
#+BEGIN_SRC emacs-lisp
  (add-hook 'c++-mode-hook 'yas-minor-mode)
  (add-hook 'c-mode-hook 'yas-minor-mode)

  (use-package flycheck-clang-analyzer
    :ensure t
    :config
    (with-eval-after-load 'flycheck
      (require 'flycheck-clang-analyzer)
      (flycheck-clang-analyzer-setup)))

  (with-eval-after-load 'company
    (add-hook 'c++-mode-hook 'company-mode)
    (add-hook 'c-mode-hook 'company-mode))

  (use-package company-c-headers
    :ensure t)

  (use-package company-irony
    :ensure t
    :config
    (setq company-backends '((company-c-headers
			      company-dabbrev-code
			      company-irony))))

  (use-package irony
    :ensure t
    :config
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'c-mode-hook 'irony-mode)
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))
#+END_SRC
**** Lisp
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
  (add-hook 'emacs-lisp-mode-hook 'yas-minor-mode)
  (add-hook 'emacs-lisp-mode-hook 'company-mode)

  (use-package slime
    :ensure t
    :config
    (setq inferior-lisp-program "/usr/bin/sbcl")
    (setq slime-contribs '(slime-fancy)))

  (use-package slime-company
    :ensure t
    :init
    (require 'company)
    (slime-setup '(slime-fancy slime-company)))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (use-package highlight-defined
    :ensure t
    :config
    (add-hook 'emacs-lisp-mode-hook 'highlight-defined-mode))
#+END_SRC
